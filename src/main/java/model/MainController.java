package model;

import com.fasterxml.jackson.annotation.JsonView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Calendar;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PassengerRepository passengerRepository;

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private FlightRepository flightRepository;

    @Autowired
    private ResToFliRepository resToFliRepository;

    @Autowired
    private FliToPasRepository fliToPasRepository;

    // Map passenger
    @PostMapping(path = "/passenger") // Map Only POST request
    // Create a new passenger
    public @ResponseBody
    String addPassenger (
            @RequestParam String firstname
            , @RequestParam String lastname
            , @RequestParam int age
            , @RequestParam String gender
            , @RequestParam String phone
    ) {

        Passenger passenger = new Passenger();
        passenger.setFirstName(firstname);
        passenger.setLastName(lastname);
        passenger.setAge(age);
        passenger.setGender(gender);
        passenger.setPhone(phone);
        passengerRepository.save(passenger);
        return "Saved";
    }

    @GetMapping(path = "/passenger/all")
    public @ResponseBody Iterable<Passenger> getPassengers() {
        // This returns a JSON or XML with the users
        return passengerRepository.findAll();
    }

    @JsonView(Views.Private1.class)
    @GetMapping(path = "/passenger/{passengerid}")
    public @ResponseBody Passenger getPassenger(@PathVariable("passengerid") String passengerid) {
        Passenger passenger = passengerRepository.findPassengerByPassengerId(passengerid);
        if (passenger == null) {
            throw new NotFoundException(
                    "Sorry, the requested passenger with id " + passengerid + " does not exist" );
        }
        else {
            return passengerRepository.findPassengerByPassengerId(passengerid);
        }
    }

    // Update passenger
    @JsonView(Views.Private1.class)
    @PutMapping(path = "/passenger/{passengerid}")
    public @ResponseBody Passenger updatePassenger(
            @PathVariable("passengerid") String passengerid
            , @RequestParam String firstname
            , @RequestParam String lastname
            , @RequestParam int age
            , @RequestParam String gender
            , @RequestParam String phone) {
        Passenger passenger = passengerRepository.findPassengerByPassengerId(passengerid);
        passenger.setFirstName(firstname);
        passenger.setLastName(lastname);
        passenger.setAge(age);
        passenger.setGender(gender);
        passenger.setPhone(phone);
        return passengerRepository.findPassengerByPassengerId(passengerid);
    }

        /* Delete passenger
        @DeleteMapping(path = "passenger/{passengerid}")
        public @ResponseBody String deletePassenger(@PathVariable("passengerid") String passengerid) {

        }
        */



    // Map reservation
    @PostMapping(path = "/reservation")
    public @ResponseBody String addReservation(
            @RequestParam String passengerid
            //, @RequestParam List<Flight> flightLists
    ) {
        Reservation reservation = new Reservation();
        Passenger passenger = passengerRepository.findPassengerByPassengerId(passengerid);
        reservation.setPassenger(passenger);
        reservationRepository.save(reservation);

        for (int i = 0; i < 2; i++) {
            ResToFli resToFli = new ResToFli();
            resToFli.setFlightNumber(String.valueOf(i));
            resToFli.setReservationNumber(reservation.getReservationNumber());
            resToFliRepository.save(resToFli);

            FliToPas fliToPas = new FliToPas();
            fliToPas.setFlightNumber(String.valueOf(i));
            fliToPas.setPassengerId(passengerid);
            fliToPasRepository.save(fliToPas);
        }

        return "Saved";
    }

    @GetMapping(path = "/reservation/all")
    public @ResponseBody Iterable<Reservation> getReservations() {
        // This returns a JSON or XML with the users
        return reservationRepository.findAll();
    }

    @JsonView(Views.Private2.class)
    @GetMapping(path = "/reservation/{reservationnum}")
    public @ResponseBody Optional<Reservation> getReservation(@PathVariable("reservationnum") String reservationnum) {

        Optional<Reservation> reservation = reservationRepository.findById(reservationnum);
        if (!reservation.isPresent()) {
            throw new NotFoundException("Reserveration with number " + reservationnum + " does not exist");
        }
        else {
            return reservationRepository.findById(reservationnum);
        }
    }

    // Update reservation
    @JsonView(Views.Private2.class)
    @PutMapping

    // Delete reservation
    @DeleteMapping



    // Map flight
    @PostMapping(path = "/flight") // Map Only GET request
    // Create a new passenger
    public @ResponseBody String addFlight (
            @RequestParam String flightnumber
            , @RequestParam double price
            , @RequestParam String origin
            , @RequestParam String destination
            , @RequestParam String description
            , @RequestParam int capacity
            , @RequestParam String model
            , @RequestParam String manufacturer
            , @RequestParam int year) {


        Flight flight = new Flight();
        flight.setFlightNumber(flightnumber);
        flight.setPrice(price);
        flight.setOrigin(origin);
        flight.setDestination(destination);
        flight.setDescription(description);

        Calendar cal1 = Calendar.getInstance();
        cal1.set(Calendar.YEAR, 2018);
        cal1.set(Calendar.MONTH, 4);
        cal1.set(Calendar.DAY_OF_MONTH, 12);
        cal1.set(Calendar.HOUR_OF_DAY, 9);
        flight.setDepartureTime(cal1);

        Calendar cal2 = Calendar.getInstance();
        cal2.set(Calendar.YEAR, 2018);
        cal2.set(Calendar.MONTH, 4);
        cal2.set(Calendar.DAY_OF_MONTH, 12);
        cal2.set(Calendar.HOUR_OF_DAY, 14);
        flight.setArrivalTime(cal2);

        Plane plane = new Plane();
        plane.setCapacity(capacity);
        plane.setModel(model);
        plane.setManufacturer(manufacturer);
        plane.setYear(year);

        flight.setPlane(plane);
        flightRepository.save(flight);

        return "Saved";
    }


    @GetMapping(path = "/flight/all")
    public @ResponseBody Iterable<Flight> getFlights() {
        // This returns a JSON or XML with the users
        return flightRepository.findAll();
    }

    @JsonView(Views.Private3.class)
    @GetMapping(path = "/flight/{flightnum}")
    public @ResponseBody
    Optional<Flight> getFlight(@PathVariable("flightnum") String flightnum) {
        Optional<Flight> flight = flightRepository.findById(flightnum);
        if (!flight.isPresent()) {
            throw new NotFoundException(
                    "Sorry, the requested flight with number " + flightnum + " does not exist");
        }
        return flightRepository.findById(flightnum);
    }


    // Update flight
    @JsonView(Views.Private3.class)
    @PutMapping(path = "flight/{flightnum}")
    public @ResponseBody Optional<Flight> updateFlight(@PathVariable("flightnum") String flightnum) {
        Optional<Flight> flight = flightRepository.findById(flightnum);
        if (!flight.isPresent()) {
            throw new NotFoundException("hello");
        }
        else {
            return flightRepository.findById(flightnum);
        }

    }

    /*
    // Delete flght
    @DeleteMapping
    */
}
